import { Component, EventEmitter, Input, NgModule, Output, ViewChild } from '@angular/core';
import { CommonModule } from '@angular/common';

var CircularSliderComponent = (function () {
    function CircularSliderComponent() {
        this.startingAngle = 15;
        this.endingAngle = 345;
        this.diameter = 66;
        this.grooveColor = '#68696A';
        this.progressColor = '#33B5E5';
        this.progressWidth = 4;
        this.grooveWidth = 6;
        this.radius = this.diameter / 2;
        this.handleWidth = 1.5;
        this.bgColor = '#333333';
        this.progressPadding = this.grooveWidth - this.progressWidth;
        this.transparentColor = 'transparent';
        this.angle = this.startingAngle;
        this.leftGrooveAngle = this.startingAngle;
        this.rightGrooveAngle = this.endingAngle;
        this.leftGrooveColor = this.grooveColor;
        this.rightGrooveColor = this.grooveColor;
        this.leftProgressColor = this.transparentColor;
        this.held = false;
        this.previousAngle = this.startingAngle;
        this.onProgressChanged = new EventEmitter();
    }
    Object.defineProperty(CircularSliderComponent.prototype, "startingAngleValue", {
        /**
         * @param {?} startingAngle
         * @return {?}
         */
        set: function (startingAngle) {
            this.startingAngle = startingAngle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CircularSliderComponent.prototype, "endingAngleValue", {
        /**
         * @param {?} endingAngle
         * @return {?}
         */
        set: function (endingAngle) {
            this.endingAngle = endingAngle;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CircularSliderComponent.prototype, "grooveColorValue", {
        /**
         * @param {?} grooveColor
         * @return {?}
         */
        set: function (grooveColor) {
            this.grooveColor = grooveColor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CircularSliderComponent.prototype, "progressColorValue", {
        /**
         * @param {?} progressColor
         * @return {?}
         */
        set: function (progressColor) {
            this.progressColor = progressColor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CircularSliderComponent.prototype, "grooveWidthValue", {
        /**
         * @param {?} grooveWidth
         * @return {?}
         */
        set: function (grooveWidth) {
            this.grooveWidth = grooveWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CircularSliderComponent.prototype, "progressWidthValue", {
        /**
         * @param {?} progressWidth
         * @return {?}
         */
        set: function (progressWidth) {
            this.progressWidth = progressWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CircularSliderComponent.prototype, "bgColorValue", {
        /**
         * @param {?} bgColor
         * @return {?}
         */
        set: function (bgColor) {
            this.bgColor = bgColor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CircularSliderComponent.prototype, "handleWidthValue", {
        /**
         * @param {?} handleWidth
         * @return {?}
         */
        set: function (handleWidth) {
            this.handleWidth = handleWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CircularSliderComponent.prototype, "diameterValue", {
        /**
         * @param {?} diameter
         * @return {?}
         */
        set: function (diameter) {
            this.diameter = diameter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CircularSliderComponent.prototype, "progressValue", {
        /**
         * @param {?} progress
         * @return {?}
         */
        set: function (progress) {
            if (this.progress == progress) {
                return;
            }
            if (progress > this.total) {
                progress = this.total;
            }
            this.progress = progress;
            this.rotateBasedOnProgress();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.ngOnInit = function () {
        this.calculateInitialPaddingTriangleDimensions();
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.calculateInitialPaddingTriangleDimensions = function () {
        /*
        These values control the padding give at the beginning and ending of the circle
            ------
                / theta - angle used to calculate the height of bottom border to control the amount of initial padding
               /
              /
             /
        */
        this.initialBtmPaddingTrnglAngleWithCenterInRad = this.toRadians(90 - ((360 - this.endingAngle) + this.startingAngle) / 2);
        this.initialBottomPaddingTriangleBottomBorderWidth = this.fetchTrnglBtmWdthBasedonAngToCntr(this.initialBtmPaddingTrnglAngleWithCenterInRad);
    };
    /**
     * Styles
     * @return {?}
     */
    CircularSliderComponent.prototype.getGrooveContainerStyle = function () {
        var /** @type {?} */ styles = {
            'width.px': this.diameter,
            'height.px': this.diameter,
            'background-color': this.bgColor
        };
        return styles;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.getGrooveStyle = function () {
        var /** @type {?} */ styles = {
            'border-width.px': this.grooveWidth,
            'border-color': this.grooveColor
        };
        return styles;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.getLeftProgressStyle = function () {
        var /** @type {?} */ styles = {
            'top.px': this.progressPadding / 2,
            'left.px': this.progressPadding / 2,
            'width.px': (this.diameter - this.progressPadding) / 2,
            'height.px': this.diameter - this.progressPadding,
            'border-width.px': this.progressWidth,
            'border-top-left-radius.px': this.diameter - this.progressPadding,
            'border-bottom-left-radius.px': this.diameter - this.progressPadding,
            'border-color': this.leftProgressColor
        };
        return styles;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.getProgressStyle = function () {
        var /** @type {?} */ styles = {
            'top.px': (this.progressPadding / 2),
            'left.px': (this.progressPadding / 2),
            'width.px': (this.diameter - this.progressPadding),
            'height.px': (this.diameter - this.progressPadding),
            'border-width.px': (this.progressWidth),
            'border-color': this.progressColor
        };
        return styles;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.getGrooveLeftStyle = function () {
        var /** @type {?} */ styles = {
            'width.px': (this.diameter),
            'height.px': (this.diameter),
            'border-width.px': (this.grooveWidth),
            'border-color': this.leftGrooveColor
        };
        return styles;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.getGrooveRightStyle = function () {
        var /** @type {?} */ styles = {
            'left.px': (-this.diameter / 2),
            'width.px': (this.diameter),
            'height.px': (this.diameter),
            'border-width.px': (this.grooveWidth),
            'border-color': this.grooveColor
        };
        return styles;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.getLeftClipStyle = function () {
        var /** @type {?} */ styles = {
            'transform': this.decorateToCSSAngle(this.leftGrooveAngle)
        };
        return styles;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.getRightClipStyle = function () {
        var /** @type {?} */ styles = {
            'transform': this.decorateToCSSAngle(this.rightGrooveAngle)
        };
        return styles;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.getHandleContainerStyle = function () {
        var /** @type {?} */ styles = {
            'top.px': (this.diameter / 2),
            'left.px': (this.diameter / 2 - this.grooveWidth / 2),
            'width.px': (this.grooveWidth),
            'height.px': (this.diameter / 2),
            'transform': this.decorateToCSSAngle(this.angle)
        };
        return styles;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.getHandleStyle = function () {
        var /** @type {?} */ styles = {
            'top.px': (this.diameter * .075),
            'width.px': (this.handleWidth),
            'height.px': (this.diameter * .3),
            'border-width.px': (this.handleWidth),
            'border-radius.px': (this.handleWidth),
            'border-color': this.progressColor,
            'background-color': this.progressColor
        };
        return styles;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.getCircularHandleStyle = function () {
        var /** @type {?} */ styles = {
            'width.px': (this.progressWidth),
            'height.px': (this.progressWidth),
            'top.px': (this.diameter / 2 + (this.grooveWidth - this.progressWidth) / 2 - this.grooveWidth),
            'background-color': this.progressColor
        };
        return styles;
    };
    /**
     * @param {?} startIngEdge
     * @return {?}
     */
    CircularSliderComponent.prototype.getEdgeContainerStyle = function (startIngEdge) {
        var /** @type {?} */ styles = {
            'width.px': (this.grooveWidth),
            'height.px': (this.diameter / 2),
            'left.px': ((this.diameter - this.grooveWidth) / 2),
            'top.px': (this.diameter / 2),
            'transform': startIngEdge ? this.decorateToCSSAngle(this.startingAngle) : this.decorateToCSSAngle(this.endingAngle)
        };
        return styles;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.getLeftEdgeStyle = function () {
        var /** @type {?} */ styles = {
            'width.px': (this.grooveWidth) / 2,
            'left.px': (this.grooveWidth) / 2,
            'height.px': (this.grooveWidth),
            'top.px': (this.diameter / 2 - this.grooveWidth),
            'background-color': this.grooveColor,
            'border-top-left-radius': 0,
            'border-bottom-left-radius': 0
        };
        return styles;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.getRightEdgeStyle = function () {
        var /** @type {?} */ styles = {
            'width.px': (this.grooveWidth) / 2,
            'height.px': (this.grooveWidth),
            'top.px': (this.diameter / 2 - this.grooveWidth),
            'background-color': this.grooveColor,
            'border-top-right-radius': 0,
            'border-bottom-right-radius': 0
        };
        return styles;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.getStartProgressContainerStyle = function () {
        var /** @type {?} */ styles = {
            'width.px': (this.progressWidth),
            'height.px': (this.diameter / 2),
            'left.px': ((this.diameter - this.progressWidth) / 2),
            'top.px': (this.diameter / 2),
            'transform': this.decorateToCSSAngle(this.startingAngle + 2) //hacky fix
        };
        return styles;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.getStartProgressStyle = function () {
        var /** @type {?} */ styles = {
            'width.px': (this.progressWidth),
            'height.px': (this.progressWidth),
            'top.px': (this.diameter / 2 - this.progressWidth - (this.grooveWidth - this.progressWidth) / 2),
            'background-color': this.progressColor
        };
        return styles;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.getClipStyle = function () {
        var /** @type {?} */ styles = {
            'top.px': (this.diameter / 2),
            'border-left-width.px': (this.diameter / 2),
            'border-right-width.px': (this.diameter / 2),
            'border-bottom-width': this.initialBottomPaddingTriangleBottomBorderWidth,
            'border-bottom-color': this.bgColor
        };
        return styles;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CircularSliderComponent.prototype.onTouchMove = function (event) {
        var /** @type {?} */ mouseX = this.recurcivelyRemoveParentXOffsets(event.touches[0].clientX, this.handleContainer.nativeElement.offsetParent);
        var /** @type {?} */ mouseY = this.recurcivelyRemoveParentYOffsets(event.touches[0].clientY, this.handleContainer.nativeElement.offsetParent);
        var /** @type {?} */ angleToRotate = this.calculateAngleBasedOnPosition(mouseX, mouseY);
        this.rotateHandle(angleToRotate);
        this.setProgressBasedOnAngle();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CircularSliderComponent.prototype.onMouseMove = function (event) {
        if (!this.held) {
            return;
        }
        var /** @type {?} */ mouseX = this.recurcivelyRemoveParentXOffsets(event.clientX, this.handleContainer.nativeElement.offsetParent);
        var /** @type {?} */ mouseY = this.recurcivelyRemoveParentYOffsets(event.clientY, this.handleContainer.nativeElement.offsetParent);
        var /** @type {?} */ angleToRotate = this.calculateAngleBasedOnPosition(mouseX, mouseY);
        this.rotateHandle(angleToRotate);
        this.setProgressBasedOnAngle();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CircularSliderComponent.prototype.onStartDrag = function (event) {
        this.held = !this.held;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CircularSliderComponent.prototype.onStopDrag = function (event) {
        this.held = false;
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.rotateBasedOnProgress = function () {
        var /** @type {?} */ angle = this.startingAngle + (this.progress / this.total * (this.endingAngle - this.startingAngle));
        this.rotateHandle(angle);
    };
    /**
     * @return {?}
     */
    CircularSliderComponent.prototype.setProgressBasedOnAngle = function () {
        var /** @type {?} */ angleProgress = Math.ceil((this.previousAngle - this.startingAngle) / (this.endingAngle - this.startingAngle) * this.total);
        this.progress = angleProgress;
        this.onProgressChanged.emit(this.progress);
    };
    /**
     * @param {?} clientX
     * @param {?} clientY
     * @return {?}
     */
    CircularSliderComponent.prototype.calculateAngleBasedOnPosition = function (clientX, clientY) {
        this.centerX = this.grooveContainer.nativeElement.offsetWidth / 2;
        this.centerY = this.grooveContainer.nativeElement.offsetHeight / 2;
        var /** @type {?} */ diffX = (clientX - this.centerX);
        var /** @type {?} */ diffY = (clientY - this.centerY);
        var /** @type {?} */ deg;
        if (diffY === 0) {
            deg = diffX > 0 ? 270 : 90;
        }
        else if (diffX === 0) {
            deg = 180;
        }
        else {
            var /** @type {?} */ rad = diffY === 0 ? 0 : Math.atan(diffX / diffY);
            deg = (rad * 180 / Math.PI);
        }
        var /** @type {?} */ angleInDeg;
        if (diffX < 0 && diffY > 0) {
            angleInDeg = Math.abs(deg);
        }
        else if (diffX < 0 && diffY < 0) {
            angleInDeg = 180 - Math.abs(deg);
        }
        else if (diffX > 0 && diffY < 0) {
            angleInDeg = 180 + Math.abs(deg);
        }
        else if (diffX > 0 && diffY > 0) {
            angleInDeg = 360 - Math.abs(deg);
        }
        else if (diffY == 0 || diffX == 0) {
            angleInDeg = deg;
        }
        return angleInDeg;
    };
    /**
     * @param {?} angle
     * @return {?}
     */
    CircularSliderComponent.prototype.rotateHandle = function (angle) {
        if (angle < this.startingAngle && this.previousAngle != this.endingAngle) {
            angle = this.startingAngle;
            this.angle = angle;
            this.previousAngle = angle;
            this.held = false;
            return;
        }
        if (angle > this.endingAngle && this.previousAngle != this.startingAngle) {
            angle = this.endingAngle;
            this.angle = angle;
            this.previousAngle = angle;
            this.held = false;
            return;
        }
        this.previousAngle = angle;
        this.angle = angle;
        if (angle >= 180) {
            this.leftGrooveAngle = 180;
            this.leftGrooveColor = this.transparentColor;
            this.rightGrooveColor = this.progressColor;
            this.leftProgressColor = this.progressColor;
            this.rightGrooveAngle = angle - 178;
        }
        else {
            this.leftGrooveAngle = angle + 2;
            this.leftGrooveColor = this.grooveColor;
            this.rightGrooveColor = this.grooveColor;
            this.rightGrooveAngle = 0;
            this.leftProgressColor = this.transparentColor;
        }
    };
    /**
     * @param {?} clientX
     * @param {?} parentElement
     * @return {?}
     */
    CircularSliderComponent.prototype.recurcivelyRemoveParentXOffsets = function (clientX, parentElement) {
        if (parentElement.offsetParent == null || parentElement.offsetParent == undefined) {
            return clientX;
        }
        clientX = clientX - parentElement.offsetLeft;
        return this.recurcivelyRemoveParentXOffsets(clientX, parentElement.offsetParent);
    };
    /**
     * @param {?} clientY
     * @param {?} parentElement
     * @return {?}
     */
    CircularSliderComponent.prototype.recurcivelyRemoveParentYOffsets = function (clientY, parentElement) {
        if (parentElement.offsetParent == null || parentElement.offsetParent == undefined) {
            return clientY;
        }
        clientY = clientY - parentElement.offsetTop;
        return this.recurcivelyRemoveParentYOffsets(clientY, parentElement.offsetParent);
    };
    /**
     * @param {?} angle
     * @return {?}
     */
    CircularSliderComponent.prototype.decorateToCSSAngle = function (angle) {
        return 'rotate(' + angle + 'deg)';
    };
    /**
     * @param {?} angleInDeg
     * @return {?}
     */
    CircularSliderComponent.prototype.toRadians = function (angleInDeg) {
        return angleInDeg * (Math.PI / 180);
    };
    /**
     * @param {?} angleInRad
     * @return {?}
     */
    CircularSliderComponent.prototype.fetchTrnglBtmWdthBasedonAngToCntr = function (angleInRad) {
        var /** @type {?} */ width = (this.radius * Math.tan(this.initialBtmPaddingTrnglAngleWithCenterInRad));
        return width + 'px';
    };
    return CircularSliderComponent;
}());
/**/
CircularSliderComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular-circular-slider',
                template: "<div class='groove-container'  [ngStyle]='getGrooveContainerStyle()' #grooveContainer (mousemove)='onMouseMove($event)' (touchmove)='onTouchMove($event)' (mouseleave)='onStopDrag($event)'> <div id='groove' [ngStyle]=\"getGrooveStyle()\" ></div> <div id='progress' [ngStyle]=\"getProgressStyle()\"></div> <div id='right-clip' [ngStyle]='getRightClipStyle()' > <div id='groove-right' [ngStyle]='getGrooveRightStyle()' ></div> </div> <div id='left-clip' [ngStyle]='getLeftClipStyle()' > <div id='groove-left' [ngStyle]='getGrooveLeftStyle()' ></div> </div> <div id='left-progress' [ngStyle]='getLeftProgressStyle()' ></div> <!--Clips the initial piece of the circle--> <div id='clip' [ngStyle]=\"getClipStyle()\" ></div> <!----> <!-- To get rounded ending --> <div class='edge-container' [ngStyle]='getEdgeContainerStyle(true)' > <div class=\"edge\" [ngStyle]='getLeftEdgeStyle()'> </div> </div> <div id='start-progress-container' [ngStyle]='getStartProgressContainerStyle()'> <div id='start-progress' [ngStyle]='getStartProgressStyle()'></div> </div> <!-- To get rounded ending --> <div class='edge-container' [ngStyle]='getEdgeContainerStyle(false)' > <div class=\"edge\" [ngStyle]='getRightEdgeStyle()'></div> </div> <div id='handle-container'  #handleContainer [ngStyle]='getHandleContainerStyle()'  (mousedown)='onStartDrag($event)' (mouseup)='onStopDrag($event)'> <div id='handle' [ngStyle]=\"getHandleStyle()\"></div> <div id='circular-handle' [ngStyle]='getCircularHandleStyle()'></div> </div> </div>",
                styles: [".groove-container { position: absolute !important; overflow: hidden; } #groove { width: 100%; height: 100%; border-style: solid; border-radius: 100%; position: absolute; margin: auto; } #left-progress { border-style: solid; border-right: 0; border-right-color: transparent; position: absolute; margin: auto; background-color: transparent; } #progress { border-style: solid; border-radius: 100%; position: absolute; margin: auto; } #groove-left { border-style: solid; border-radius: 100%; position: relative; margin: auto; } #groove-right { border-style: solid; border-radius: 100%; position: relative; margin: auto; } #left-clip { width: 50%; height: 100%; position: absolute; background-color: transparent; transform-origin: right center; overflow: hidden; } #right-clip { left: 50%; width: 50%; height: 100%; position: absolute; transform-origin: left center; overflow: hidden; } #handle-container { position: absolute; -webkit-transform-origin: top center; transform-origin: top center; } #handle { border-style: solid; position: relative; margin: auto; cursor: pointer; } #circular-handle { border-radius: 100%; position: absolute; } .edge-container { position: absolute; transform-origin: top center; } .edge { border-radius: 100%; position: absolute; } #start-progress-container { position: absolute; transform-origin: top center; } #start-progress { border-radius: 100%; position: absolute; } #clip { position: absolute; height: 0px; width: 0px; border-left-style: solid; border-left-color: transparent; border-right-style: solid; border-right-color: transparent; border-bottom-style: solid; } "]
            },] },
];
/**
 * @nocollapse
 */
CircularSliderComponent.ctorParameters = function () { return []; };
CircularSliderComponent.propDecorators = {
    'handleContainer': [{ type: ViewChild, args: ['handleContainer',] },],
    'grooveContainer': [{ type: ViewChild, args: ['grooveContainer',] },],
    'startingAngleValue': [{ type: Input, args: ['startingAngle',] },],
    'endingAngleValue': [{ type: Input, args: ['endingAngle',] },],
    'grooveColorValue': [{ type: Input, args: ['grooveColor',] },],
    'progressColorValue': [{ type: Input, args: ['progressColor',] },],
    'grooveWidthValue': [{ type: Input, args: ['grooveWidth',] },],
    'progressWidthValue': [{ type: Input, args: ['progressWidth',] },],
    'bgColorValue': [{ type: Input, args: ['backgroundColor',] },],
    'handleWidthValue': [{ type: Input, args: ['handleWidth',] },],
    'diameterValue': [{ type: Input, args: ['diameter',] },],
    'total': [{ type: Input, args: ['total',] },],
    'progressValue': [{ type: Input, args: ['progress',] },],
    'onProgressChanged': [{ type: Output },],
};

var CircularSliderModule = (function () {
    function CircularSliderModule() {
    }
    /**
     * @return {?}
     */
    CircularSliderModule.forRoot = function () {
        return {
            ngModule: CircularSliderModule
        };
    };
    return CircularSliderModule;
}());
CircularSliderModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    CircularSliderComponent
                ],
                exports: [
                    CircularSliderComponent
                ]
            },] },
];
/**
 * @nocollapse
 */
CircularSliderModule.ctorParameters = function () { return []; };

export { CircularSliderModule, CircularSliderComponent };
